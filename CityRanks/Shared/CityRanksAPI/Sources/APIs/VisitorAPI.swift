//
// VisitorAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class VisitorAPI {
    /**
     City visitors from ID: Return city visitors from given id
     
     - parameter id: (path) City ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCityVisitors(id: Int64, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Visitor]?,_ error: Error?) -> Void)) {
        getCityVisitorsWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     City visitors from ID: Return city visitors from given id
     - GET /cities/{id}/visitors
     - parameter id: (path) City ID 
     - returns: RequestBuilder<[Visitor]> 
     */
    open class func getCityVisitorsWithRequestBuilder(id: Int64) -> RequestBuilder<[Visitor]> {
        var path = "/cities/{id}/visitors"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Visitor]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
